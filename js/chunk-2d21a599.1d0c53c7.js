(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d21a599"],{baae:function(t,e,i){"use strict";i.r(e),i.d(e,"MetamaskAdapter",(function(){return o}));var s=i("9523"),a=i.n(s),n=i("4c41"),r=i.n(n),h=i("b089");class o extends h["e"]{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),a()(this,"adapterNamespace",h["c"].EIP155),a()(this,"currentChainNamespace",h["f"].EIP155),a()(this,"type",h["a"].EXTERNAL),a()(this,"name",h["i"].METAMASK),a()(this,"status",h["d"].NOT_READY),a()(this,"rehydrated",!1),a()(this,"metamaskProvider",null),this.chainConfig=t.chainConfig}get provider(){return this.status===h["d"].CONNECTED&&this.metamaskProvider?this.metamaskProvider:null}set provider(t){throw new Error("Not implemented")}async init(t){if(super.checkInitializationRequirements(),this.metamaskProvider=await r()({mustBeMetaMask:!0}),!this.metamaskProvider)throw h["j"].notInstalled("Metamask extension is not installed");this.status=h["d"].READY,this.emit(h["b"].READY,h["i"].METAMASK);try{t.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(e){this.emit(h["b"].ERRORED,e)}}setAdapterSettings(t){}async connect(){if(super.checkConnectionRequirements(),this.chainConfig||(this.chainConfig=Object(h["m"])(h["f"].EIP155,1)),this.status=h["d"].CONNECTING,this.emit(h["b"].CONNECTING,{adapter:h["i"].METAMASK}),!this.metamaskProvider)throw h["k"].notConnectedError("Not able to connect with metamask");try{await this.metamaskProvider.request({method:"eth_requestAccounts"});const{chainId:t}=this.metamaskProvider;if(t!==this.chainConfig.chainId&&await this.switchChain(this.chainConfig),this.status=h["d"].CONNECTED,!this.provider)throw h["k"].notConnectedError("Failed to connect with provider");return this.provider.once("disconnect",()=>{this.disconnect()}),this.emit(h["b"].CONNECTED,{adapter:h["i"].METAMASK,reconnected:this.rehydrated}),this.provider}catch(t){throw this.status=h["d"].READY,this.rehydrated=!1,this.emit(h["b"].ERRORED,t),h["k"].connectionError("Failed to login with metamask wallet")}}async disconnect(){var t;let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(this.status!==h["d"].CONNECTED)throw h["k"].disconnectionError("Not connected with wallet");null===(t=this.provider)||void 0===t||t.removeAllListeners(),e.cleanup?(this.status=h["d"].NOT_READY,this.metamaskProvider=null):this.status=h["d"].READY,this.rehydrated=!1,this.emit(h["b"].DISCONNECTED)}async getUserInfo(){if(this.status!==h["d"].CONNECTED)throw h["k"].notConnectedError("Not connected with wallet, Please login/connect first");return{}}async switchChain(t){if(!this.metamaskProvider)throw h["k"].notConnectedError("Not connected with wallet");try{await this.metamaskProvider.request({method:"wallet_switchEthereumChain",params:[{chainId:t.chainId}]})}catch(e){if(4902!==e.code)throw e;await this.metamaskProvider.request({method:"wallet_addEthereumChain",params:[{chainId:t.chainId,chainName:t.displayName,rpcUrls:[t.rpcTarget]}]})}}}}}]);
//# sourceMappingURL=chunk-2d21a599.1d0c53c7.js.map