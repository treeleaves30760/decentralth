{"version":3,"sources":["webpack:///./node_modules/@web3auth/phantom-adapter/dist/phantomAdapter.esm.js"],"names":["poll","callback","interval","count","Promise","resolve","reject","setTimeout","async","done","then","res","catch","err","detectProvider","_window$solana","options","arguments","length","undefined","isPhantomAvailable","window","solana","isPhantom","isAvailable","_window$solana2","PhantomAdapter","super","this","PHANTOM","SOLANA","EXTERNAL","NOT_READY","_wallet","off","_onDisconnect","rehydrated","status","CONNECTED","READY","emit","DISCONNECTED","chainConfig","_this$_wallet","isConnected","_this$phantomProvider","phantomProvider","provider","_","Error","checkInitializationRequirements","notInstalled","config","autoConnect","connect","error","_this","checkConnectionRequirements","CONNECTING","adapter","connectWithProvider","handleDisconnect","_handleDisconnect","once","windowClosed","_len","args","Array","_key","apply","reason","connectionError","message","publicKey","on","ERRORED","cleanup","isWalletConnected","notConnectedError","_this$_wallet2","disconnect","disconnectionError","injectedProvider","setupProvider","reconnected"],"mappings":"kHAAA,4HAKA,SAASA,EAAKC,EAAUC,EAAUC,GAChC,OAAO,IAAIC,QAAQ,CAACC,EAASC,KACvBH,EAAQ,EACVI,WAAWC,UACT,MAAMC,QAAaR,IACfQ,GAAMJ,EAAQI,GACbA,GAAMT,EAAKC,EAAUC,EAAUC,EAAQ,GAAGO,KAAKC,IAClDN,EAAQM,GACDA,IACNC,MAAMC,GAAOP,EAAOO,KACtBX,GAEHG,GAAQ,KAId,MAAMS,EAAiBN,iBACrB,IAAIO,EAEJ,IAAIC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAChFf,SAAU,IACVC,MAAO,GAET,MAAMiB,EAAuC,qBAAXC,UAAkE,QAApCN,EAAiBM,OAAOC,cAAuC,IAAnBP,IAA6BA,EAAeQ,WAExJ,GAAIH,EACF,OAAOC,OAAOC,OAGhB,MAAME,QAAoBxB,EAAK,KAC7B,IAAIyB,EAEJ,OAA6C,QAArCA,EAAkBJ,OAAOC,cAAwC,IAApBG,OAA6B,EAASA,EAAgBF,WAC1GP,EAAQd,SAAUc,EAAQb,OAC7B,OAAIqB,EAAoBH,OAAOC,OACxB,MAGT,MAAMI,UAAuB,OAC3B,cACE,IAAIV,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAClFU,QAEA,IAAgBC,KAAM,OAAQ,OAAgBC,SAE9C,IAAgBD,KAAM,mBAAoB,OAAmBE,QAE7D,IAAgBF,KAAM,wBAAyB,OAAiBE,QAEhE,IAAgBF,KAAM,OAAQ,OAAiBG,UAE/C,IAAgBH,KAAM,SAAU,OAAeI,WAE/C,IAAgBJ,KAAM,UAAW,MAEjC,IAAgBA,KAAM,kBAAmB,MAEzC,IAAgBA,KAAM,cAAc,GAEpC,IAAgBA,KAAM,gBAAiB,KACjCA,KAAKK,UACPL,KAAKK,QAAQC,IAAI,aAAcN,KAAKO,eAEpCP,KAAKQ,YAAa,EAElBR,KAAKS,OAAST,KAAKS,SAAW,OAAeC,UAAY,OAAeC,MAAQ,OAAeP,UAC/FJ,KAAKY,KAAK,OAAeC,iBAI7Bb,KAAKc,YAAc1B,EAAQ0B,YAG7B,wBACE,IAAIC,EAEJ,QAA6C,QAAlCA,EAAgBf,KAAKK,eAAuC,IAAlBU,IAA4BA,EAAcC,aAAehB,KAAKS,SAAW,OAAeC,WAG/I,eACE,IAAIO,EAEJ,OAA2D,QAAlDA,EAAwBjB,KAAKkB,uBAAuD,IAA1BD,OAAmC,EAASA,EAAsBE,WAAa,KAGpJ,aAAaC,GACX,MAAM,IAAIC,MAAM,mBAGlB,mBAAmBD,IAEnB,WAAWhC,GAWT,GAVAW,MAAMuB,kCAEDtB,KAAKc,cACRd,KAAKc,YAAc,eAAe,OAAiBZ,OAAQ,QAG7DF,KAAKK,cAAgBnB,EAAe,CAClCZ,SAAU,IACVC,MAAO,KAEJyB,KAAKK,QAAS,MAAM,OAA0BkB,eACnDvB,KAAKkB,gBAAkB,IAAI,6BAAwB,CACjDM,OAAQ,CACNV,YAAad,KAAKc,eAGtBd,KAAKS,OAAS,OAAeE,MAC7BX,KAAKY,KAAK,OAAeD,MAAO,OAAgBV,SAEhD,IACMb,EAAQqC,cACVzB,KAAKQ,YAAa,QACZR,KAAK0B,WAEb,MAAOC,GACP,IAAIA,MAAM,iDAAkDA,GAC5D3B,KAAKY,KAAK,UAAWe,IAIzB,gBACE,IAAIC,EAAQ5B,KAEZ,IAME,GALAD,MAAM8B,8BACN7B,KAAKS,OAAS,OAAeqB,WAC7B9B,KAAKY,KAAK,OAAekB,WAAY,CACnCC,QAAS,OAAgB9B,WAEtBD,KAAKK,QAAS,MAAM,OAA0BkB,eAEnD,GAAKvB,KAAKK,QAAQW,kBAoCVhB,KAAKgC,oBAAoBhC,KAAKK,aApCP,CAC7B,MAAM4B,EAAmBjC,KAAKK,QAAQ6B,kBAEtC,UACQ,IAAI1D,QAAQ,CAACC,EAASC,KAC1B,MAAMgD,EAAU9C,gBACRoB,KAAKgC,oBAAoBhC,KAAKK,SACpC5B,EAAQuB,KAAKmB,WAGf,IAAKnB,KAAKK,QAAS,OAAO3B,EAAO,OAA0B6C,gBAE3DvB,KAAKK,QAAQ8B,KAAK,UAAWT,GAG7B1B,KAAKK,QAAQ6B,kBAAoB,WAC/BxD,EAAO,OAA0B0D,gBAEjC,IAAK,IAAIC,EAAOhD,UAAUC,OAAQgD,EAAO,IAAIC,MAAMF,GAAOG,EAAO,EAAGA,EAAOH,EAAMG,IAC/EF,EAAKE,GAAQnD,UAAUmD,GAGzB,OAAOP,EAAiBQ,MAAMb,EAAMvB,QAASiC,IAG/CtC,KAAKK,QAAQqB,UAAU1C,MAAM0D,IAC3BhE,EAAOgE,OAGX,MAAOf,GACP,GAAIA,aAAiB,OAAe,MAAMA,EAC1C,MAAM,OAAiBgB,gBAA0B,OAAVhB,QAA4B,IAAVA,OAAmB,EAASA,EAAMiB,SAC3F,QACA5C,KAAKK,QAAQ6B,kBAAoBD,GAMrC,IAAKjC,KAAKK,QAAQwC,UAAW,MAAM,OAAiBF,kBAIpD,OAFA3C,KAAKK,QAAQyC,GAAG,aAAc9C,KAAKO,eAE5BP,KAAKmB,SACZ,MAAOQ,GAKP,MAHA3B,KAAKS,OAAS,OAAeE,MAC7BX,KAAKQ,YAAa,EAClBR,KAAKY,KAAK,OAAemC,QAASpB,GAC5BA,GAIV,mBACE,IAAIvC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,CAChF2D,SAAS,GAEX,IAAKhD,KAAKiD,kBAAmB,MAAM,OAAiBC,kBAAkB,6BAEtE,IACE,IAAIC,QAEuC,QAAnCA,EAAiBnD,KAAKK,eAAwC,IAAnB8C,OAA4B,EAASA,EAAeC,cAEnGhE,EAAQ4D,UACVhD,KAAKS,OAAS,OAAeL,UAC7BJ,KAAKkB,gBAAkB,KACvBlB,KAAKK,QAAU,MAGjBL,KAAKY,KAAK,OAAeC,cACzB,MAAOc,GACP3B,KAAKY,KAAK,OAAemC,QAAS,OAAiBM,mBAA6B,OAAV1B,QAA4B,IAAVA,OAAmB,EAASA,EAAMiB,WAI9H,oBACE,IAAK5C,KAAKiD,kBAAmB,MAAM,OAAiBC,kBAAkB,yDACtE,MAAO,GAGT,0BAA0BI,GACxB,IAAKtD,KAAKkB,gBAAiB,MAAM,OAAiByB,gBAAgB,uBAOlE,aANM3C,KAAKkB,gBAAgBqC,cAAcD,GACzCtD,KAAKS,OAAS,OAAeC,UAC7BV,KAAKY,KAAK,OAAeF,UAAW,CAClCqB,QAAS,OAAgB9B,QACzBuD,YAAaxD,KAAKQ,aAEbR,KAAKmB","file":"js/chunk-2d0c2145.240fab19.js","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, ADAPTER_EVENTS, getChainConfig, WalletInitializationError, Web3AuthError, WalletLoginError } from '@web3auth/base';\nimport { PhantomInjectedProvider } from '@web3auth/solana-provider';\nimport log from 'loglevel';\n\nfunction poll(callback, interval, count) {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done) poll(callback, interval, count - 1).then(res => {\n          resolve(res);\n          return res;\n        }).catch(err => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\nconst detectProvider = async function () {\n  var _window$solana;\n\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    interval: 1000,\n    count: 3\n  };\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!((_window$solana = window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom);\n\n  if (isPhantomAvailable) {\n    return window.solana;\n  }\n\n  const isAvailable = await poll(() => {\n    var _window$solana2;\n\n    return (_window$solana2 = window.solana) === null || _window$solana2 === void 0 ? void 0 : _window$solana2.isPhantom;\n  }, options.interval, options.count);\n  if (isAvailable) return window.solana;\n  return null;\n};\n\nclass PhantomAdapter extends BaseAdapter {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.PHANTOM);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.SOLANA);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"_wallet\", null);\n\n    _defineProperty(this, \"phantomProvider\", null);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"_onDisconnect\", () => {\n      if (this._wallet) {\n        this._wallet.off(\"disconnect\", this._onDisconnect);\n\n        this.rehydrated = false; // ready to be connected again only if it was previously connected and not cleaned up\n\n        this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n        this.emit(ADAPTER_EVENTS.DISCONNECTED);\n      }\n    });\n\n    this.chainConfig = options.chainConfig;\n  }\n\n  get isWalletConnected() {\n    var _this$_wallet;\n\n    return !!((_this$_wallet = this._wallet) !== null && _this$_wallet !== void 0 && _this$_wallet.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider() {\n    var _this$phantomProvider;\n\n    return ((_this$phantomProvider = this.phantomProvider) === null || _this$phantomProvider === void 0 ? void 0 : _this$phantomProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(_) {}\n\n  async init(options) {\n    super.checkInitializationRequirements(); // set chainConfig for mainnet by default if not set\n\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n\n    this._wallet = await detectProvider({\n      interval: 500,\n      count: 3\n    });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig\n      }\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect() {\n    var _this = this;\n\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, {\n        adapter: WALLET_ADAPTERS.PHANTOM\n      });\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n\n        try {\n          await new Promise((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet);\n              resolve(this.provider);\n            };\n\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n\n            this._wallet.once(\"connect\", connect); // Raise an issue on phantom that if window is closed, disconnect event is not fired\n\n\n            this._wallet._handleDisconnect = function () {\n              reject(WalletInitializationError.windowClosed());\n\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              return handleDisconnect.apply(_this._wallet, args);\n            };\n\n            this._wallet.connect().catch(reason => {\n              reject(reason);\n            });\n          });\n        } catch (error) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError(error === null || error === void 0 ? void 0 : error.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      var _this$_wallet2;\n\n      await ((_this$_wallet2 = this._wallet) === null || _this$_wallet2 === void 0 ? void 0 : _this$_wallet2.disconnect());\n\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError(error === null || error === void 0 ? void 0 : error.message));\n    }\n  }\n\n  async getUserInfo() {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async connectWithProvider(injectedProvider) {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, {\n      adapter: WALLET_ADAPTERS.PHANTOM,\n      reconnected: this.rehydrated\n    });\n    return this.provider;\n  }\n\n}\n\nexport { PhantomAdapter };\n//# sourceMappingURL=phantomAdapter.esm.js.map\n"],"sourceRoot":""}