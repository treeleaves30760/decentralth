{"version":3,"sources":["webpack:///./node_modules/@web3auth/metamask-adapter/dist/metamaskAdapter.esm.js"],"names":["MetamaskAdapter","adapterOptions","arguments","length","undefined","super","this","EIP155","EXTERNAL","METAMASK","NOT_READY","chainConfig","status","CONNECTED","metamaskProvider","_","Error","options","checkInitializationRequirements","mustBeMetaMask","notInstalled","READY","emit","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","CONNECTING","adapter","notConnectedError","request","method","chainId","switchChain","provider","once","disconnect","reconnected","connectionError","_this$provider","cleanup","disconnectionError","removeAllListeners","DISCONNECTED","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget"],"mappings":"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","file":"js/chunk-2d21a599.1d0c53c7.js","sourcesContent":["import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { BaseAdapter, ADAPTER_NAMESPACES, CHAIN_NAMESPACES, ADAPTER_CATEGORY, WALLET_ADAPTERS, ADAPTER_STATUS, WalletInitializationError, ADAPTER_EVENTS, getChainConfig, WalletLoginError } from '@web3auth/base';\n\nclass MetamaskAdapter extends BaseAdapter {\n  constructor() {\n    let adapterOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.EXTERNAL);\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.METAMASK);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"rehydrated\", false);\n\n    _defineProperty(this, \"metamaskProvider\", null);\n\n    this.chainConfig = adapterOptions.chainConfig;\n  }\n\n  get provider() {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider;\n    }\n\n    return null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = await detectEthereumProvider({\n      mustBeMetaMask: true\n    });\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(_) {}\n\n  async connect() {\n    super.checkConnectionRequirements(); // set default to mainnet\n\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, {\n      adapter: WALLET_ADAPTERS.METAMASK\n    });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"eth_requestAccounts\"\n      });\n      const {\n        chainId\n      } = this.metamaskProvider;\n\n      if (chainId !== this.chainConfig.chainId) {\n        await this.switchChain(this.chainConfig);\n      }\n\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.METAMASK,\n        reconnected: this.rehydrated\n      });\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect() {\n    var _this$provider;\n\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    (_this$provider = this.provider) === null || _this$provider === void 0 ? void 0 : _this$provider.removeAllListeners();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  async switchChain(chainConfig) {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{\n          chainId: chainConfig.chainId\n        }]\n      });\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if (switchError.code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{\n            chainId: chainConfig.chainId,\n            chainName: chainConfig.displayName,\n            rpcUrls: [chainConfig.rpcTarget]\n          }]\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n\n}\n\nexport { MetamaskAdapter };\n//# sourceMappingURL=metamaskAdapter.esm.js.map\n"],"sourceRoot":""}