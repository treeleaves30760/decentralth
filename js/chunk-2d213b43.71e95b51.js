(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d213b43"],{ae8a:function(t,e,n){"use strict";n.r(e),n.d(e,"WalletConnectV1Adapter",(function(){return u}));var i=n("9523"),o=n.n(i),r=n("e07a"),c=n("b089"),s=n("1e6b"),a=n("5c7d"),h=n.n(a);function d(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?d(Object(n),!0).forEach((function(e){o()(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}class u extends c["e"]{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),o()(this,"name",c["i"].WALLET_CONNECT_V1),o()(this,"adapterNamespace",c["c"].EIP155),o()(this,"currentChainNamespace",c["f"].EIP155),o()(this,"type",c["a"].EXTERNAL),o()(this,"adapterOptions",void 0),o()(this,"status",c["d"].NOT_READY),o()(this,"adapterData",{uri:""}),o()(this,"connector",null),o()(this,"wcProvider",null),o()(this,"rehydrated",!1),this.adapterOptions=l({},t),this.chainConfig=t.chainConfig}get connected(){var t;return!(null===(t=this.connector)||void 0===t||!t.connected)}get provider(){var t;return(null===(t=this.wcProvider)||void 0===t?void 0:t.provider)||null}set provider(t){throw new Error("Not implemented")}async init(){super.checkInitializationRequirements(),this.chainConfig||(this.chainConfig=Object(c["m"])(c["f"].EIP155,1)),this.connector=this.getWalletConnectInstance(),this.wcProvider=new s["WalletConnectProvider"]({config:{chainConfig:this.chainConfig}}),this.emit(c["b"].READY,c["i"].WALLET_CONNECT_V1),this.status=c["d"].READY,this.connector.connected&&(this.rehydrated=!0,await this.onConnectHandler({accounts:this.connector.accounts,chainId:this.connector.chainId.toString()}))}async connect(){if(super.checkConnectionRequirements(),!this.connector)throw c["j"].notReady("Wallet adapter is not ready yet");if(this.connected)return await this.onConnectHandler({accounts:this.connector.accounts,chainId:this.connector.chainId.toString()}),this.provider;var t;this.status!==c["d"].CONNECTING&&(null!==(t=this.adapterOptions.adapterSettings)&&void 0!==t&&t.qrcodeModal&&(this.connector=this.getWalletConnectInstance()),await this.createNewSession(),this.status=c["d"].CONNECTING,this.emit(c["b"].CONNECTING,{adapter:c["i"].WALLET_CONNECT_V1}));return new Promise((t,e)=>{if(!this.connector)return e(c["j"].notReady("Wallet adapter is not ready yet"));this.connector.on("modal_closed",async()=>(this.status=c["d"].READY,this.emit(c["b"].READY,c["i"].WALLET_CONNECT_V1),e(new Error("User closed modal"))));try{this.connector.on("connect",async(e,n)=>(e&&this.emit(c["b"].ERRORED,e),await this.onConnectHandler(n.params[0]),t(this.provider)))}catch(n){h.a.error("Wallet connect v1 adapter error while connecting",n),this.status=c["d"].READY,this.rehydrated=!0,this.emit(c["b"].ERRORED,n),e(n instanceof c["l"]?n:c["k"].connectionError("Failed to login with wallet connect: ".concat((null===n||void 0===n?void 0:n.message)||"")))}})}async getUserInfo(){if(!this.connected)throw c["k"].notConnectedError("Not connected with wallet, Please login/connect first");return{}}async disconnect(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};const{cleanup:e}=t;if(!this.connector||!this.connected)throw c["k"].notConnectedError("Not connected with wallet");await this.connector.killSession(),this.rehydrated=!1,e?(this.connector=null,this.status=c["d"].NOT_READY,this.wcProvider=null):this.status=c["d"].READY,this.emit(c["b"].DISCONNECTED)}async createNewSession(){var t,e;let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{forceNewSession:!1};if(!this.connector)throw c["j"].notReady("Wallet adapter is not ready yet");if(n.forceNewSession&&this.connector.pending&&await this.connector.killSession(),null===(t=this.adapterOptions)||void 0===t||null===(e=t.adapterSettings)||void 0===e||!e.qrcodeModal)return new Promise((t,e)=>{var n;if(!this.connector)return e(c["j"].notReady("Wallet adapter is not ready yet"));h.a.debug("creating new session for web3auth wallet connect"),this.connector.on("display_uri",async(n,i)=>{var o;if(n)return this.emit(c["b"].ERRORED,c["k"].connectionError("Failed to display wallet connect qr code")),e(n);const r=i.params[0];return this.updateAdapterData({uri:r}),null===(o=this.connector)||void 0===o||o.off("display_uri"),t()}),this.connector.createSession({chainId:parseInt((null===(n=this.chainConfig)||void 0===n?void 0:n.chainId)||"0x1",16)}).catch(t=>(h.a.error("error while creating new wallet connect session",t),this.emit(c["b"].ERRORED,t),e(t)))});var i;await this.connector.createSession({chainId:parseInt((null===(i=this.chainConfig)||void 0===i?void 0:i.chainId)||"0x1",16)})}async onConnectHandler(t){if(!this.connector||!this.wcProvider)throw c["j"].notReady("Wallet adapter is not ready yet");if(!this.chainConfig)throw c["j"].invalidParams("Chain config is not set");const{chainId:e}=t;h.a.debug("connected chainId",e);const n=parseInt(e,Object(c["n"])(e)?16:10);if(n!==parseInt(this.chainConfig.chainId,16))return await this.createNewSession({forceNewSession:!0}),void this.emit(c["b"].ERRORED,c["j"].fromCode(5e3,"Not connected to correct chainId. Expected: ".concat(this.chainConfig.chainId,", Current: ").concat(n,", Please switch to correct chain from wallet")));await this.wcProvider.setupProvider(this.connector),this.subscribeEvents(this.connector),this.status=c["d"].CONNECTED,this.emit(c["b"].CONNECTED,{adapter:c["i"].WALLET_CONNECT_V1,reconnected:this.rehydrated})}subscribeEvents(t){t.on("session_update",async t=>{t&&this.emit(c["b"].ERRORED,t)})}getWalletConnectInstance(){const t=this.adapterOptions.adapterSettings||{};return t.bridge=t.bridge||"https://bridge.walletconnect.org",new r["a"](t)}}}}]);
//# sourceMappingURL=chunk-2d213b43.71e95b51.js.map